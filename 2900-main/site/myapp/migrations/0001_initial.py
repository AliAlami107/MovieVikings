# Generated by Django 5.2 on 2025-05-12 13:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('milestone', 'Milestone Badge'), ('genre', 'Genre Specialist'), ('critic', 'Critic Badge'), ('explorer', 'Explorer Badge')], max_length=20)),
                ('rarity', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', max_length=20)),
                ('icon', models.CharField(help_text='Font awesome icon class or emoji', max_length=100)),
                ('requirement_count', models.IntegerField(default=0, help_text='Number required to earn this badge (e.g., 10 movies)')),
                ('requirement_type', models.CharField(help_text="Type of requirement (e.g., 'movies_watched', 'reviews')", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StreamingProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('tmdb_id', models.IntegerField(unique=True)),
                ('logo_path', models.CharField(max_length=255)),
                ('display_priority', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='StreamingService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(unique=True)),
                ('title', models.CharField(max_length=255)),
                ('overview', models.TextField(blank=True, null=True)),
                ('poster_path', models.CharField(blank=True, max_length=255, null=True)),
                ('popularity', models.FloatField(default=0.0)),
                ('rating', models.FloatField(default=0.0)),
                ('vote_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('runtime', models.IntegerField(blank=True, null=True)),
                ('genres', models.ManyToManyField(blank=True, to='myapp.genre')),
            ],
        ),
        migrations.CreateModel(
            name='MovieProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(choices=[('NO', 'Norway'), ('US', 'United States'), ('GB', 'United Kingdom'), ('DE', 'Germany'), ('FR', 'France'), ('SE', 'Sweden'), ('DK', 'Denmark')], default='NO', help_text='Region code for content availability', max_length=2)),
                ('type', models.CharField(choices=[('flatrate', 'Streaming'), ('rent', 'Rent'), ('buy', 'Buy')], max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streaming_info', to='myapp.movie')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.streamingprovider')),
            ],
            options={
                'verbose_name': 'Movie Provider',
                'verbose_name_plural': 'Movie Providers',
            },
        ),
        migrations.CreateModel(
            name='TVShow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField(unique=True)),
                ('title', models.CharField(max_length=255)),
                ('overview', models.TextField(blank=True, null=True)),
                ('poster_path', models.CharField(blank=True, max_length=255, null=True)),
                ('popularity', models.FloatField(default=0.0)),
                ('rating', models.FloatField(default=0.0)),
                ('vote_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_air_date', models.DateField(blank=True, null=True)),
                ('last_air_date', models.DateField(blank=True, null=True)),
                ('number_of_seasons', models.IntegerField(blank=True, null=True)),
                ('number_of_episodes', models.IntegerField(blank=True, null=True)),
                ('episode_run_time', models.JSONField(blank=True, null=True)),
                ('genres', models.ManyToManyField(blank=True, to='myapp.genre')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', to='auth.permission', verbose_name='user permissions')),
                ('favorite_movies', models.ManyToManyField(blank=True, related_name='favorited_by', to='myapp.movie')),
                ('streaming_services', models.ManyToManyField(blank=True, related_name='users', to='myapp.streamingservice')),
                ('favorite_shows', models.ManyToManyField(blank=True, related_name='favorited_by', to='myapp.tvshow')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TVShowProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(choices=[('NO', 'Norway'), ('US', 'United States'), ('GB', 'United Kingdom'), ('DE', 'Germany'), ('FR', 'France'), ('SE', 'Sweden'), ('DK', 'Denmark')], default='NO', help_text='Region code for content availability', max_length=2)),
                ('type', models.CharField(choices=[('flatrate', 'Streaming'), ('rent', 'Rent'), ('buy', 'Buy')], max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.streamingprovider')),
                ('tv_show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streaming_info', to='myapp.tvshow')),
            ],
            options={
                'verbose_name': 'TV Show Provider',
                'verbose_name_plural': 'TV Show Providers',
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_date', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WatchedMovie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_id', models.CharField(max_length=50)),
                ('media_type', models.CharField(choices=[('movie', 'Movie'), ('tv', 'TV Show')], max_length=10)),
                ('title', models.CharField(max_length=255)),
                ('poster_path', models.CharField(blank=True, max_length=255, null=True)),
                ('rating', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('watched_date', models.DateTimeField(auto_now_add=True)),
                ('runtime', models.IntegerField(blank=True, null=True)),
                ('rated_date', models.DateTimeField(blank=True, null=True)),
                ('review', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watched_movies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WatchlistItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('media_id', models.CharField(max_length=50)),
                ('media_type', models.CharField(max_length=10)),
                ('poster_path', models.CharField(blank=True, max_length=200, null=True)),
                ('added_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watchlist_items', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_sent', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-popularity'], name='myapp_movie_popular_8fa223_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-rating'], name='myapp_movie_rating_8a25d5_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['release_date'], name='myapp_movie_release_bb249c_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['title'], name='myapp_movie_title_f09c5a_idx'),
        ),
        migrations.AddIndex(
            model_name='movie',
            index=models.Index(fields=['-created_at'], name='myapp_movie_created_f1df02_idx'),
        ),
        migrations.AddIndex(
            model_name='movieprovider',
            index=models.Index(fields=['region', 'type'], name='myapp_movie_region_95228a_idx'),
        ),
        migrations.AddIndex(
            model_name='movieprovider',
            index=models.Index(fields=['movie', 'region'], name='myapp_movie_movie_i_00cbac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='movieprovider',
            unique_together={('movie', 'provider', 'region', 'type')},
        ),
        migrations.AddIndex(
            model_name='tvshow',
            index=models.Index(fields=['-popularity'], name='myapp_tvsho_popular_5ab520_idx'),
        ),
        migrations.AddIndex(
            model_name='tvshow',
            index=models.Index(fields=['-rating'], name='myapp_tvsho_rating_4f7946_idx'),
        ),
        migrations.AddIndex(
            model_name='tvshow',
            index=models.Index(fields=['first_air_date'], name='myapp_tvsho_first_a_d37e1b_idx'),
        ),
        migrations.AddIndex(
            model_name='tvshow',
            index=models.Index(fields=['title'], name='myapp_tvsho_title_acd109_idx'),
        ),
        migrations.AddIndex(
            model_name='tvshow',
            index=models.Index(fields=['-created_at'], name='myapp_tvsho_created_ddca8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tvshowprovider',
            index=models.Index(fields=['region', 'type'], name='myapp_tvsho_region_ba3ecb_idx'),
        ),
        migrations.AddIndex(
            model_name='tvshowprovider',
            index=models.Index(fields=['tv_show', 'region'], name='myapp_tvsho_tv_show_9119bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tvshowprovider',
            unique_together={('tv_show', 'provider', 'region', 'type')},
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AlterUniqueTogether(
            name='watchedmovie',
            unique_together={('user', 'media_id', 'media_type')},
        ),
        migrations.AlterUniqueTogether(
            name='watchlistitem',
            unique_together={('user', 'media_id', 'media_type')},
        ),
    ]
